name: terrascan vulnerabilities
on:
  workflow_call:
    secrets:
      ACCESS_TOKEN:
        required: true

jobs:
    terrascan_k8s:
        name: terrascan_k8s
        runs-on: self-hosted
        steps:
        - name: pulling repo 5gplustactile/deployment-digital-twins
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/deployment-digital-twins'
            ref: ${{ github.head_ref }}
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }}          

        # extract branch name
        - name: Extract branch name
          shell: bash
          run: echo "branch=${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}" >> $GITHUB_OUTPUT
          id: extract_branch

        - name: Get branch name
          run: echo 'The branch name is' ${{ steps.extract_branch.outputs.branch }}

        - name: Getting variable branch
          run: |
           echo "BRANCH=$(echo ${{ steps.extract_branch.outputs.branch }} | cut -d/ -f2)" >> $GITHUB_ENV

        - name: Installing dependencies
          env:
            GIT_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          run: |  
           echo "### install yq ###"
           sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
           sudo chmod a+x /usr/local/bin/yq
           yq --version

           echo "### install helm ###"
           # Download Helm
           curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3           
           # Give the script execute permission
           chmod 700 get_helm.sh           
           # Run the install script
           ./get_helm.sh
           helm version


        - name: Getting helm values
          env:
             GIT_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          run: |
            
            # Use yq to extract the values
            echo "NAME=$(yq e '.metadata.name' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
            repoURL=$(yq e '.spec.source.repoURL' ${{ env.BRANCH }}/main.yaml)
            
            # Check if the repoURL contains the string "5gplustactile" after "https://"
            if echo "$repoURL" | grep -q "https://.*5gplustactile"; then
                echo "The repoURL contains '5gplustactile' after 'https://', so. It is local repo"
                echo "REPOURL=$(yq e '.spec.source.repoURL' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
                echo "PATH_REPO=$(yq e '.spec.source.path' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
                echo "FOLDER_REPO=$(basename $repoURL .git)" >> $GITHUB_ENV
                echo "TARGETREVISION=$(yq e '.spec.source.targetRevision' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
                echo "REPO_IS_LOCAL=true" >> $GITHUB_ENV
            else
              echo "The repoURL does not contain '5gplustactile' after 'https://', so, the repoURL is external repo..Skipping"
              echo "REPOURL=$(yq e '.spec.source.repoURL' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
              echo "TARGETREVISION=$(yq e '.spec.source.targetRevision' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
              echo "CHART=$(yq e '.spec.source.chart' ${{ env.BRANCH }}/main.yaml)" >> $GITHUB_ENV
              echo "REPO_IS_LOCAL=false" >> $GITHUB_ENV
            fi
  
            
        - name: pulling repo ${{ env.REPOURL }}
          if: ${{ env.REPO_IS_LOCAL == 'true' }} 
          uses: actions/checkout@v3
          with:
            repository: '5gplustactile/${{ env.FOLDER_REPO }}'
            ref: main
            fetch-depth: 0
            token: ${{ secrets.ACCESS_TOKEN }} 


        - name: Helm template - Local helm repo
          if: ${{ env.REPO_IS_LOCAL == 'true' }} 
          env:
             GIT_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          run: |
            
            # Print the values
            echo "NAME: ${{ env.NAME }}"
            echo "repoURL: ${{ env.REPOURL }}"
            echo "path: ${{ env.PATH_REPO }}"
            
            mkdir -p ${{ env.BRANCH }}/temporal/

            echo "#### helm template ###"

            helm template ${{ env.PATH_REPO }}/ --namespace ${{ env.NAME }} --output-dir ${{ env.BRANCH }}/temporal


        - name: Helm template - External helm repo
          if: ${{ env.REPO_IS_LOCAL == 'false' }} 
          env:
             GIT_TOKEN: ${{ secrets.ACCESS_TOKEN }}
          run: |
            
            # Print the values
            echo "NAME: ${{ env.NAME }}"
            echo "repoURL: ${{ env.REPOURL }}"
            echo "targetRevision: ${{ env.TARGETREVISION }}"
            echo "CHART: ${{ env.CHART }}"
            
            mkdir -p ${{ env.BRANCH }}/temporal/

            echo "#### helm template ###"
            helm repo add ${{ env.NAME }} ${{ env.REPOURL }} 
            helm template ${{ env.NAME }} ${{ env.NAME }}/${{ env.CHART }} --version ${{ env.TARGETREVISION }} --namespace ${{ env.NAME }} --output-dir ${{ env.BRANCH }}/temporal


        - name: Run Terrascan - ${{ env.CHART }} - Local Helm repo
          if: ${{ env.REPO_IS_LOCAL == 'true' }}
          id: terrascan_edge_int
          uses: tenable/terrascan-action@main
          with:
            iac_type: 'k8s'
            iac_version: 'v1'
            policy_type: 'k8s'
            only_warn: true
            sarif_upload: false
            iac_dir: ${{ env.BRANCH }}/temporal/${{ env.NAME }}
            verbose: true
           #non_recursive:
           #policy_path:
           #skip_rules:

#        - name: Upload SARIF file
#          uses: github/codeql-action/upload-sarif@v1
#          with:
#            sarif_file: terrascan_region.sarif


        - name: Run Terrascan - ${{ env.CHART }} - External Helm repo
          if: ${{ env.REPO_IS_LOCAL == 'false' }}
          id: terrascan_edge_ext
          uses: tenable/terrascan-action@main
          with:
            iac_type: 'k8s'
            iac_version: 'v1'
            policy_type: 'k8s'
            only_warn: true
            sarif_upload: false
            iac_dir: ${{ env.BRANCH }}/temporal/${{ env.CHART }}
            verbose: true
           #non_recursive:
           #policy_path:
           #skip_rules:

#        - name: Upload SARIF file
#          uses: github/codeql-action/upload-sarif@v1
#          with:
#            sarif_file: terrascan_region.sarif